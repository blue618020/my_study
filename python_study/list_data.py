# 리스트(list) 자료형
# 여러개의 값을 변수 1개에 저장
# 0개 이상 자료형이면 뭐든지 가능
[1, 2, 3, 4, 5, 6, 7, 8, 9]   
[1, 1, 1, 1, 1]
["hello", "world", "Python"]
[1, "hello", 2, "wow"]
[1, 2, ["hello", "world"]]
[]

li_1 = [1, 2, 3]
print(li_1[0])
print(li_1[1])
print(li_1[2])
print(li_1[-1])
print(li_1[0] + li_1[1])

li_2 = [1, 2 ,3 ,[4, 5, 6]] 
print(li_2[3][0]) 
# 슬라이싱도 응용해서 가능
print(li_2[2:3]) 
print(li_2[1:])
print(li_2[:2])
print(li_2[3][0:2]) 

print(li_2[0:1])
print(li_2[0])
# 둘의 차이점은 [1]과 1 이다. 슬라이스는 칸 범위를 똑 잘라서 가져오는거라서 다름

li_3 = [1, 2, 3, 4, 5]
# 출력 결과가 [2, 3]이 되도록 만드세요.
print(li_3[1:3])
print(len(li_3)) #li_3 리스트 안에 데이터 갯수 구하기

# [10, 2 ,3, 4, 5] 로 변경
li_3[0] = 10
print(li_3)

"""
[[1, 2, 3]
[4, 5, 6]
[7, 8, 9]] 
"""
# 행, 열을 컴퓨터로 나타내는 방법(2차원)
# 리스트의 []은 차원을 나타내는거라 무한으로 리스트를 겹칠 수 있는 인공지능(컴퓨터)은 차원이 엄청난 것...


# 리스트 함수의 종류
# append(원소) (업엔드)
# 리스트의 마지막에 원소를 추가
li_4 = [1, 2, 3]
li_4.append(4)
li_4.append("문자")
li_4.append([1, 2, 3]) 
print(li_4) # 결과 [1, 2, 3, 4, '문자', [1, 2, 3]]

# insert(인덱스, 원소)
# 인덱스 위치에 원소 삽입
li = [1, 2, 3]
li.insert(1, 10)
print(li) # 결과 [1, 10, 2, 3]

# remove(값)
# 리스트에서 함수에 입력된 값과 같은 값을 찾아서 삭제함
# 먼저 나오는 값만 삭제
# 리스트에 없는 값을 삭제하려고 하면 에러남
li = [1, 2, 3, 2]
li.remove(2)
print(li) # 결과 [1, 3, 2]

# pop(인덱스)
# 리스트의 인덱스 위치의 요소를 꺼냄
# 인덱스를 함수에 전달하지 않으면 제일 마지막 요소를 꺼냄
# pop은 꺼낸 그 값 자체를 사용할 수도 있어서 remove와는 차이가 있음
li = [1, 2, 3, 4]
a = li.pop()
print(li) # 결과 [1, 2, 3]
print(a) # 결과 4
b = li.pop(1)
print(li) # 결과 [1, 3] 
print(b) # 결과 2 

# index(값)
# 리스트에서 값을 찾아 그 값의 인덱스를 돌려줌
# 값이 리스트에 없으면 에러남
# li[2] > 인덱싱(인덱스로 값에 접근)
# li.index(값) > 인덱스 알아내기
li = [1, 2, 3]
ldx = li.index(2) 
print(ldx) # 결과 1

# sort()
# 리스트의 요소를 정렬함
li = [5, 3, 1, 4, 2]
li.sort()
print(li) # 결과 [1, 2, 3, 4, 5] 오름차순
li.sort(reverse = True) # 거꾸로 정렬 = 수락
print(li) # 결과 [5, 4, 3, 2, 1] 내림차순

# reverse()
# 리스트의 순서를 뒤집는 함수
# !!정렬 아님 sort와 같이 쓰는거랑 다름!!
li = [5, 4, 3, 2, 1]
li.reverse()
print(li) # 결과 [2, 4, 3, 1, 5]

# count(값)
# 리스트 안에서 해당 값이 몇개 있는지 세는 함수
# 입력한 값이 리스트 안에 없으면 오류나는게 아닌 0을 출력하기 때문에 값의 유무를 확인하기 좋은 방법1
li = [1, 2, 3, 2]
cnt = li.count(2)
print(cnt) # 결과 2

# + 연산자
# 리스트를 연결함
# extend() 함수와 같음
li_1 = [1, 2, 3]
li_2 = [4, 5, 6]
print(li_1 + li_2) # 결과 [1, 2, 3, 4, 5, 6]
li_1.extend(li_2)  # 결과 [1, 2, 3, 4, 5, 6]

# * 연산자
# 리스트를 반복함
li = [1, 2, 3]
print(li * 3) # 결과 [1, 2, 3, 1, 2, 3, 1, 2, 3]



